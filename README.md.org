* 19 Testing: Tech Quiz Test Suite
:PROPERTIES:
:CUSTOM_ID: testing-tech-quiz-test-suite
:END:
** Your Task
:PROPERTIES:
:CUSTOM_ID: your-task
:END:
Your assignment this week underscores the importance of ensuring
reliability and robustness in modern web applications through
comprehensive testing. In today's dynamic development environment,
testing is not just an afterthought but a critical part of the
development process that ensures applications meet user demands and
perform efficiently under various conditions.

This week, you'll take the starter codebase of a fully functioning Tech
Quiz application and enhance it by adding Cypress for both component and
end-to-end tests. The app was built using the MERN stack with a React
front end, MongoDB database, and Node.js/Express.js server and API. It
allows users to take a quiz of ten random questions and view their final
score.

To complete the assignment, you'll need to do the following:

1. Install Cypress as a dev dependency

2. Configure Cypress for both component and end-to-end testing

3. Create a component test for the quiz component

4. Create an end-to-test for the quiz component

** User Story
:PROPERTIES:
:CUSTOM_ID: user-story
:END:
#+begin_src md
AS AN aspiring developer
I WANT to take a tech quiz
SO THAT I can test my knowledge and improve my skills
#+end_src

** Acceptance Criteria
:PROPERTIES:
:CUSTOM_ID: acceptance-criteria
:END:
#+begin_src md
GIVEN I am taking a tech quiz
WHEN I click the start button
THEN the quiz starts and I am presented with a question
WHEN I answer a question
THEN I am presented with another question
WHEN all questions are answered
THEN the quiz is over
WHEN the quiz is over
THEN I can view my score
WHEN the quiz is over
THEN I can start a new quiz
#+end_src

** Mock-Up
:PROPERTIES:
:CUSTOM_ID: mock-up
:END:
The following animation demonstrates the application functionality:

#+caption: A GIF demonstrates a functioning quiz.
[[./Assets/19-testing-homework-demo.gif]]

** Getting Started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:
This Challenge combines many of the skills we've covered so far. In
addition to the user story and acceptance criteria, we've provided some
guidelines to help you get started.

Because this Challenge requires a video submission, refer to the
[[https://coding-boot-camp.github.io/full-stack/computer-literacy/video-submission-guide][Full-Stack
Blog video submission guide]] for guidance on creating and sharing a
video.

*Important*: You won't need to modify code for the existing application.
In this challenge, you'll only be creating tests for the existing
application.

Your testing should use
[[https://docs.cypress.io/guides/overview/why-cypress][Cypress]] to run
both the component tests and the end-to-end tests. The testing will be
invoked using the following command:

#+begin_src sh
npm run test
#+end_src

It's recommended that you start with a directory structure that looks
like the following example:

#+begin_src md
.
├── client/                 // the client application
├── cypress/                // Folder for Cypress
    ├── component/          // Folder for component tests
        └── Quiz.cy.jsx     // Component tests for the Quiz component
    ├── e2e/                // Folder for end-to-end tests
        └── quiz.cy.js      // End-to-end tests for the Tech Quiz
    ├── fixtures/           // Folder for test fixtures
        └── questions.json  // Mock data for testing
    └── tsconfig.json
├── server/                 // the server application
├── .gitignore
├── cypress.config.ts       // Runs the application using imports from lib/
├── package.json
├── tsconfig.json
└── README.md              // App description, link to video, setup and usage instructions           
#+end_src

*Note*: The server for this application requires environment variables
to function properly. You'll need to rename the =.env.example= file to
=.env=.

** Grading Requirements
:PROPERTIES:
:CUSTOM_ID: grading-requirements
:END:

#+begin_quote
*Note*: If a Challenge assignment submission is marked as "0", it's
considered incomplete and won't count towards your graduation
requirements. Examples of incomplete submissions include the following:

- A repository that has no code

- A repository that includes a unique name but nothing else

- A repository that includes only a README file but nothing else

- A repository that only includes starter code

#+end_quote

This Challenge is graded based on the following criteria:

*** Deliverables: 15%
:PROPERTIES:
:CUSTOM_ID: deliverables-15
:END:
- Your GitHub repository must contain the application code as well as
  the configuration and tests using Cypress.

*** Walkthrough Video: 32%
:PROPERTIES:
:CUSTOM_ID: walkthrough-video-32
:END:
- A walkthrough video that demonstrates the component and end-to-end
  tests running and passing must be submitted.

- The =README.md= file must include a link to the walkthrough video.

- The walkthrough video must show all tests passing from the command
  line.

- The walkthrough video must demonstrate how a user would invoke the
  application from the command line.

*** Technical Acceptance Criteria: 40%
:PROPERTIES:
:CUSTOM_ID: technical-acceptance-criteria-40
:END:
- Your submission should satisfy all of the preceding acceptance
  criteria in addition to the following:

  - You must use the [[https://www.npmjs.com/package/cypress][Cypress
    package]].

  - The application must have a component test for the quiz component.

  - The application must have an end-to-end test for the quiz component.

*** Repository Quality: 13%
:PROPERTIES:
:CUSTOM_ID: repository-quality-13
:END:
- Your repository has a unique name.

- Your repository follows the best practices for file structure and
  naming conventions.

- Your repository follows the best practices for class/id naming
  conventions, indentation, quality comments, etc.

- Your repository contains multiple descriptive commit messages.

- Your repository contains a high-quality README with a description and
  a link to your walkthrough video.

** Review
:PROPERTIES:
:CUSTOM_ID: review
:END:
You are required to submit BOTH of the following for review:

- A walkthrough video that demonstrates the functionality of the
  application and the application successfully passing tests.

- The URL of your GitHub repository, which should have a unique name and
  include a README describing the project.

--------------

© 2024 edX Boot Camps LLC. Confidential and Proprietary. All Rights
Reserved.
